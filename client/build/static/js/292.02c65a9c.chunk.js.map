{"version":3,"file":"static/js/292.02c65a9c.chunk.js","mappings":"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","sources":["pages/GroupSettings/FormDialog/Form/index.tsx","pages/GroupSettings/FormDialog/FormModel/formModel.ts","pages/GroupSettings/FormDialog/FormModel/validationSchema.ts","pages/GroupSettings/FormDialog/FormModel/emptyInitialValues.ts","pages/GroupSettings/FormDialog/index.tsx","pages/GroupSettings/Grid/Buttons/AddGroupButton.tsx","pages/GroupSettings/Grid/GroupGridToolbar.tsx","pages/GroupSettings/Grid/Buttons/UpdateGroupButton.tsx","pages/GroupSettings/Grid/index.tsx","pages/GroupSettings/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport Grid from '@mui/material/Grid';\nimport InputField from '../../../../components/FormFields/InputField';\nimport AutocompleteField from '../../../../components/FormFields/AutocompleteField';\nimport { Field } from 'formik';\nimport { useEffect } from 'react';\nimport { fetchFormDataAction, selectGroupsState } from '../../../../redux/reducers/groups/groupsReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TextField } from '@mui/material';\nimport SelectField from '../../../../components/FormFields/SelectField';\n\ninterface IGroupFormProps {\n    formField?: any;\n}\n\nconst GroupForm = (props: IGroupFormProps) => {\n    const {\n        formField: { name, desc, students, id, teacher, language },\n    } = props;\n\n    const dispatch = useDispatch();\n    const { studentsAutocompleteValues, teachersValues, languagesValues } = useSelector(selectGroupsState);\n\n    useEffect(() => {\n        dispatch(fetchFormDataAction());\n    }, []);\n\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={12} sm={12}>\n                    <InputField margin='dense' name={name.name} label={name.label} fullWidth />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                    <InputField margin='dense' multiline maxRows={4} name={desc.name} label={desc.label} fullWidth />\n                </Grid>\n                <Grid item xs={12} sm={12}>\n                    <Field\n                        margin='dense'\n                        name={students.name}\n                        component={AutocompleteField}\n                        options={studentsAutocompleteValues}\n                        groupBy={(option: any) => option.label[0]}\n                        textFieldProps={{\n                            fullWidth: true,\n                            margin: 'normal',\n                            variant: 'outlined',\n                            label: students.label,\n                        }}\n                        multiple\n                    />\n                </Grid>\n                <Grid item xs={12} sm={12} sx={{ marginTop: 2 }}>\n                    <SelectField name={teacher.name} label={teacher.label} data={teachersValues} fullWidth />\n                </Grid>\n                <Grid item xs={12} sm={12} sx={{ marginTop: 2 }}>\n                    <SelectField name={language.name} label={language.label} data={languagesValues} fullWidth />\n                </Grid>\n            </Grid>\n            <TextField name={id.name} type='hidden' style={{ display: 'none' }} />\n        </>\n    );\n};\n\nexport default GroupForm;\n","export default {\n    formId: 'addGroupForm',\n    formField: {\n        name: {\n            name: 'name',\n            label: 'Название*',\n            requiredErrorMsg: 'Имя обязательно для заполнения!',\n        },\n        desc: {\n            name: 'desc',\n            label: 'Описание',\n        },\n        students: {\n            name: 'students',\n            label: 'Ученики',\n            requiredErrorMsg: 'Необходимо выбрать учеников!',\n        },\n        id: {\n            name: 'id',\n        },\n        teacher: {\n            name: 'teacher',\n            label: 'Учитель',\n            requiredErrorMsg: 'Необходимо выбрать учителя!',\n        },\n        language: {\n            name: 'language',\n            label: 'Язык',\n            requiredErrorMsg: 'Необходимо выбрать язык!',\n        },\n    },\n};\n","import formModel from './formModel';\nimport * as Yup from 'yup';\n\nconst {\n    formField: { name, students, teacher, language },\n} = formModel;\n\nexport default Yup.object().shape({\n    [name.name]: Yup.string().required(`${name.requiredErrorMsg}`),\n    [teacher.name]: Yup.string().nullable().required(`${teacher.requiredErrorMsg}`),\n    [language.name]: Yup.string().nullable().required(`${language.requiredErrorMsg}`),\n    [students.name]: Yup.array().required(`${students.requiredErrorMsg}`),\n});\n","import formModel from './formModel';\nconst {\n    formField: { name, desc, students, id, teacher, language },\n} = formModel;\n\nexport const emptyInitialValues: { [p: string]: string | { label: string; value: string }[] | undefined | number } = {\n    [name.name]: '',\n    [desc.name]: '',\n    [students.name]: [],\n    [teacher.name]: undefined,\n    [language.name]: undefined,\n    [id.name]: undefined,\n};\n","import DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport * as React from 'react';\nimport GroupForm from './Form';\nimport { Formik, Form } from 'formik';\nimport formModel from './FormModel/formModel';\nimport validationSchema from './FormModel/validationSchema';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createOrUpdateGroupAction, fetchGroupsAction, selectGroupsState } from '../../../redux/reducers/groups/groupsReducer';\nimport { emptyInitialValues } from './FormModel/emptyInitialValues';\nimport { useEffect, useState } from 'react';\nimport { IGroup } from '../../../interfaces/IGroup';\n\ninterface IGroupDialogFormProps {\n    open: boolean;\n    close: () => void;\n    group?: IGroup;\n}\n\nconst { formId, formField } = formModel;\n\nconst GroupDialogForm = (props: IGroupDialogFormProps) => {\n    const { open, close, group } = props;\n    const dispatch = useDispatch();\n\n    const [initValues, setInitValues] =\n        useState<{ [p: string]: string | number | { label: string; value: string }[] | undefined }>(emptyInitialValues);\n\n    function _handleSubmit(values: any, actions: any) {\n        dispatch(createOrUpdateGroupAction(values));\n        close();\n    }\n\n    useEffect(() => {\n        setExistInitialValues();\n    }, []);\n\n    const setExistInitialValues = () => {\n        const studentsViews = group?.students?.map(stud => {\n            return { label: `${stud.lastName} ${stud.firstName}`, value: String(stud.id) };\n        });\n\n        setInitValues({\n            name: group?.name.toString(),\n            desc: group?.description?.toString(),\n            students: studentsViews,\n            id: group?.id,\n            teacher: String(group?.teacher.id),\n            language: String(group?.language.id),\n        });\n    };\n\n    return (\n        <Dialog open={open} onClose={close} fullWidth={true} maxWidth='sm'>\n            <DialogTitle>{group ? 'Изменение данных группы' : 'Добавление новой группы'}</DialogTitle>\n            <Formik onSubmit={_handleSubmit} initialValues={initValues} validationSchema={validationSchema} validateOnChange>\n                {({ isSubmitting }) => (\n                    <Form id={formId}>\n                        <DialogContent>\n                            <GroupForm formField={formField} />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button type='submit' color='primary'>\n                                Ок\n                            </Button>\n                            <Button onClick={close} color='secondary'>\n                                Отмена\n                            </Button>\n                        </DialogActions>\n                    </Form>\n                )}\n            </Formik>\n        </Dialog>\n    );\n};\n\nexport default GroupDialogForm;\n","import { useState } from 'react';\nimport GroupDialogForm from '../../FormDialog';\nimport IconButton from '@mui/material/IconButton';\nimport AddIcon from '@mui/icons-material/Add';\nimport Tooltip from '@mui/material/Tooltip';\n\nconst AddGroupButton = () => {\n    const [openAddDialog, setOpenAddDialog] = useState(false);\n\n    const showAddGroupDialog = () => {\n        setOpenAddDialog(true);\n    };\n\n    const closeAddGroupDialog = () => {\n        setOpenAddDialog(false);\n    };\n\n    return (\n        <>\n            <GroupDialogForm open={openAddDialog} close={closeAddGroupDialog} />\n            <Tooltip title='Добавить'>\n                <IconButton\n                    onClick={() => {\n                        showAddGroupDialog();\n                    }}\n                >\n                    <AddIcon />\n                </IconButton>\n            </Tooltip>\n        </>\n    );\n};\n\nexport default AddGroupButton;\n","import Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport AddGroupButton from './Buttons/AddGroupButton';\n\nconst GroupGridToolbar = () => {\n    return (\n        <>\n            <Toolbar>\n                <Typography sx={{ flex: '1 1 100%' }} variant='h6' id='tableTitle' component='div'>\n                    Учебные группы\n                </Typography>\n                <AddGroupButton />\n            </Toolbar>\n        </>\n    );\n};\n\nexport default GroupGridToolbar;\n","import Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport EditIcon from '@mui/icons-material/Edit';\nimport GroupDialogForm from '../../FormDialog';\nimport { useState } from 'react';\nimport { IGroup } from '../../../../interfaces/IGroup';\n\nconst UpdateGroupButton = (props: { group: IGroup }) => {\n    const { group } = props;\n\n    const [openDialog, setOpenDialog] = useState(false);\n\n    const showGroupDialog = () => {\n        setOpenDialog(true);\n    };\n\n    const closeGroupDialog = () => {\n        setOpenDialog(false);\n    };\n\n    return (\n        <>\n            <GroupDialogForm open={openDialog} close={closeGroupDialog} group={group} />\n\n            <Tooltip title='Изменить'>\n                <IconButton\n                    onClick={() => {\n                        showGroupDialog();\n                    }}\n                >\n                    <EditIcon />\n                </IconButton>\n            </Tooltip>\n        </>\n    );\n};\n\nexport default UpdateGroupButton;\n","import Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableBody from '@mui/material/TableBody';\nimport TableRow from '@mui/material/TableRow';\nimport TableHead from '@mui/material/TableHead';\nimport Table from '@mui/material/Table';\nimport { TableCell } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    deleteGroupAction,\n    fetchGroupsAction,\n    selectGroupsState,\n    setPage,\n    setRowsPerPage,\n} from '../../../redux/reducers/groups/groupsReducer';\nimport { useEffect } from 'react';\nimport { IGroup } from '../../../interfaces/IGroup';\nimport GroupGridToolbar from './GroupGridToolbar';\nimport UpdateGroupButton from './Buttons/UpdateGroupButton';\nimport TablePagination from '@mui/material/TablePagination';\nimport * as React from 'react';\nimport TableBodySkeleton from '../../../components/Skeletons/TableBodySkeleton';\nimport DeleteButton from '../../../components/Buttons/DeleteButton';\n\nconst GroupGrid = () => {\n    const dispatch = useDispatch();\n    const { groupsData, page, rowsPerPage, isLoading } = useSelector(selectGroupsState);\n\n    const fetchGroupsData = () => {\n        dispatch(fetchGroupsAction(page, rowsPerPage));\n    };\n\n    useEffect(() => {\n        fetchGroupsData();\n    }, [page, rowsPerPage]);\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        dispatch(setPage(newPage));\n        fetchGroupsData();\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setRowsPerPage(parseInt(event.target.value, 10)));\n        dispatch(setPage(0));\n\n        fetchGroupsData();\n    };\n\n    const headerRows: { text: string; align: 'left' | 'center' | 'right' }[] = [\n        {\n            text: 'Код',\n            align: 'left',\n        },\n        {\n            text: 'Название',\n            align: 'center',\n        },\n        {\n            text: 'Учитель',\n            align: 'center',\n        },\n        {\n            text: 'Язык',\n            align: 'center',\n        },\n        {\n            text: 'Количество учеников',\n            align: 'center',\n        },\n        {\n            text: 'Описание',\n            align: 'center',\n        },\n        {\n            text: 'Действия',\n            align: 'right',\n        },\n    ];\n\n    return (\n        <>\n            <Box sx={{ width: '100%' }}>\n                <Paper sx={{ width: '100%', mb: 2 }}>\n                    <>\n                        <GroupGridToolbar />\n                        <TableContainer component={Paper}>\n                            <Table sx={{ minWidth: 1000 }} aria-labelledby='tableTitle' size='medium'>\n                                <TableHead>\n                                    <TableRow>\n                                        {headerRows.map(value => (\n                                            <>\n                                                <TableCell align={value.align}>\n                                                    <b>{value.text}</b>\n                                                </TableCell>\n                                            </>\n                                        ))}\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {!isLoading && groupsData ? (\n                                        <>\n                                            {groupsData.data.length ? (\n                                                <>\n                                                    {groupsData.data.map((group: IGroup) => (\n                                                        <TableRow key={group.id}>\n                                                            <TableCell component='th' scope='row' align='left'>\n                                                                {group.id}\n                                                            </TableCell>\n                                                            <TableCell component='th' scope='row' align='center'>\n                                                                {group.name}\n                                                            </TableCell>\n                                                            <TableCell component='th' scope='row' align='center'>\n                                                                {group.teacher.lastName} {group.teacher.firstName}{' '}\n                                                                {group.teacher.middleName ?? ''}\n                                                            </TableCell>\n                                                            <TableCell component='th' scope='row' align='center'>\n                                                                {group.language?.name}\n                                                            </TableCell>\n                                                            <TableCell component='th' scope='row' align='center'>\n                                                                {group.students?.length}\n                                                            </TableCell>\n                                                            <TableCell component='th' scope='row' align='center'>\n                                                                {group.description}\n                                                            </TableCell>\n                                                            <TableCell component='th' scope='row' align='right'>\n                                                                <UpdateGroupButton group={group} />\n                                                                <DeleteButton\n                                                                    id={group.id}\n                                                                    confirmationText='Вы действительно хотите удалить группу?'\n                                                                    title='Удалить группу?'\n                                                                    onDeleteMethod={() => {\n                                                                        dispatch(deleteGroupAction(group.id));\n                                                                    }}\n                                                                />\n                                                            </TableCell>\n                                                        </TableRow>\n                                                    ))}\n                                                </>\n                                            ) : (\n                                                <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n                                                    <TableCell key={4} component='th' scope='row' align='center'>\n                                                        Отсутствуют данные\n                                                    </TableCell>\n                                                </TableRow>\n                                            )}\n                                        </>\n                                    ) : (\n                                        <TableBodySkeleton columnsCount={headerRows.length} />\n                                    )}\n                                </TableBody>\n                            </Table>\n                            {groupsData ? (\n                                <TablePagination\n                                    rowsPerPageOptions={[5, 10, 15]}\n                                    component='div'\n                                    count={groupsData?.meta.itemCount}\n                                    rowsPerPage={rowsPerPage}\n                                    page={page}\n                                    onPageChange={handleChangePage}\n                                    onRowsPerPageChange={handleChangeRowsPerPage}\n                                />\n                            ) : null}\n                        </TableContainer>\n                    </>\n                </Paper>\n            </Box>\n        </>\n    );\n};\n\nexport default GroupGrid;\n","import * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { useSelector } from 'react-redux';\nimport GroupGrid from './Grid';\nimport { selectGlobalState } from '../../redux/reducers/global/globalReducer';\nimport DashboardPage from '../../components/Pages/DashboardPage';\n\nconst GroupSettings = () => {\n    const { isLoading } = useSelector(selectGlobalState);\n\n    return (\n        <>\n            <DashboardPage title='Управление группами'>\n                <Typography variant='h4' sx={{ mb: 6 }}>\n                    Управление группами\n                </Typography>\n\n                {/*<Grid container spacing={3} justifyContent='center'>*/}\n                <GroupGrid />\n                {/*</Grid>*/}\n            </DashboardPage>\n        </>\n    );\n};\n\nexport default GroupSettings;\n"],"names":["props","formField","name","desc","students","id","teacher","language","dispatch","useDispatch","useSelector","selectGroupsState","studentsAutocompleteValues","teachersValues","languagesValues","useEffect","fetchFormDataAction","Grid","container","item","xs","sm","InputField","margin","label","fullWidth","multiline","maxRows","component","AutocompleteField","options","groupBy","option","textFieldProps","variant","multiple","sx","marginTop","SelectField","data","TextField","type","style","display","requiredErrorMsg","formModel","Yup","shape","required","nullable","emptyInitialValues","undefined","formId","open","close","group","useState","initValues","setInitValues","setExistInitialValues","studentsViews","map","stud","lastName","firstName","value","String","toString","description","Dialog","onClose","maxWidth","DialogTitle","onSubmit","values","actions","createOrUpdateGroupAction","initialValues","validationSchema","validateOnChange","isSubmitting","DialogContent","DialogActions","Button","color","onClick","openAddDialog","setOpenAddDialog","Tooltip","title","IconButton","Add","Toolbar","Typography","flex","openDialog","setOpenDialog","Edit","groupsData","page","rowsPerPage","isLoading","fetchGroupsData","fetchGroupsAction","headerRows","text","align","Box","width","Paper","mb","TableContainer","Table","minWidth","size","TableHead","TableRow","TableCell","TableBody","length","scope","middleName","DeleteButton","confirmationText","onDeleteMethod","deleteGroupAction","borderBottom","TableBodySkeleton","columnsCount","TablePagination","rowsPerPageOptions","count","meta","itemCount","onPageChange","event","newPage","setPage","onRowsPerPageChange","setRowsPerPage","parseInt","target","selectGlobalState","DashboardPage"],"sourceRoot":""}