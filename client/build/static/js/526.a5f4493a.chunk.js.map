{"version":3,"file":"static/js/526.a5f4493a.chunk.js","mappings":"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","sources":["pages/StudentsSettings/Grid/index.tsx","pages/StudentsSettings/index.tsx","../node_modules/@mui/icons-material/AddCard.js"],"sourcesContent":["import Paper from '@mui/material/Paper';\nimport TableRow from '@mui/material/TableRow';\nimport { TableCell, Tooltip } from '@mui/material';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport TableContainer from '@mui/material/TableContainer';\nimport Table from '@mui/material/Table';\nimport TableHead from '@mui/material/TableHead';\nimport TableBody from '@mui/material/TableBody';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchStudents, selectStudentsState } from '../../../redux/reducers/students/studentsReducer';\nimport { useEffect } from 'react';\nimport NumberFormat from 'react-number-format';\nimport IconButton from '@mui/material/IconButton';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport AssessmentIcon from '@mui/icons-material/Assessment';\nimport Collapse from '@mui/material/Collapse';\nimport Typography from '@mui/material/Typography';\nimport { IStudent } from '../../../interfaces/IStudent';\nimport moment from 'moment';\nimport TableBodySkeleton from '../../../components/Skeletons/TableBodySkeleton';\nimport { Link } from 'react-router-dom';\nimport HistoryIcon from '@mui/icons-material/History';\nimport AddCardIcon from '@mui/icons-material/AddCard';\n\nconst StudentsGrid = () => {\n    const dispatch = useDispatch();\n    const headerRows: { text: string; align: 'left' | 'center' | 'right' }[] = [\n        {\n            text: 'Код',\n            align: 'left',\n        },\n        {\n            text: 'ФИО',\n            align: 'center',\n        },\n        {\n            text: 'ФИО Родителя',\n            align: 'center',\n        },\n        {\n            text: 'Контактный телефон родителя',\n            align: 'center',\n        },\n        {\n            text: 'Email родителя',\n            align: 'center',\n        },\n        {\n            text: '',\n            align: 'center',\n        },\n        {\n            text: '',\n            align: 'center',\n        },\n    ];\n    const { students, isStudentsLoading } = useSelector(selectStudentsState);\n    const fetchStudentsData = () => {\n        dispatch(fetchStudents());\n    };\n\n    useEffect(() => {\n        fetchStudentsData();\n    }, []);\n\n    return (\n        <Box sx={{ width: '100%' }}>\n            <Paper sx={{ width: '100%', mb: 2 }}>\n                <TableContainer component={Paper}>\n                    <Table sx={{ minWidth: 1000 }} aria-labelledby='tableTitle' size='medium'>\n                        <TableHead>\n                            <TableRow>\n                                {headerRows.map(value => (\n                                    <>\n                                        <TableCell align={value.align}>\n                                            <b>{value.text}</b>\n                                        </TableCell>\n                                    </>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {!isStudentsLoading && students ? (\n                                <>\n                                    {students.length ? (\n                                        <>\n                                            {students?.map(student => (\n                                                <>\n                                                    <StudentGroupRow student={student} />\n                                                </>\n                                            ))}\n                                        </>\n                                    ) : (\n                                        <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n                                            <TableCell key={4} component='th' scope='row' align='center'>\n                                                Отсутствуют данные\n                                            </TableCell>\n                                        </TableRow>\n                                    )}\n                                </>\n                            ) : (\n                                <TableBodySkeleton columnsCount={headerRows.length} />\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Paper>\n        </Box>\n    );\n};\n\nconst StudentGroupRow = (props: { student: IStudent }) => {\n    const [open, setOpen] = React.useState(false);\n    const { student } = props;\n    return (\n        <>\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell component='th' scope='row' align='left'>\n                    {student.id}\n                </TableCell>\n                <TableCell component='th' scope='row' align='center'>\n                    {student.firstName} {student.middleName} {student.lastName}\n                </TableCell>\n                <TableCell component='th' scope='row' align='center'>\n                    {student.parentName} {student.parentMiddleName} {student.parentLastName}\n                </TableCell>\n                <TableCell component='th' scope='row' align='center'>\n                    <NumberFormat value={student.parentPhone} displayType={'text'} format='+ 7 (###) ### ##-##' />\n                </TableCell>\n                <TableCell component='th' scope='row' align='center'>\n                    {student.parentEmail}\n                </TableCell>\n                <TableCell component='th' scope='row'>\n                    <Tooltip title='Открыть список групп'>\n                        <IconButton size='small' onClick={() => setOpen(!open)}>\n                            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                        </IconButton>\n                    </Tooltip>\n                </TableCell>\n                <TableCell component='th' scope='row'>\n                    <Tooltip title='Новый отчет по успеваемости'>\n                        <IconButton size='small' to={`/dashboard/reports/${student.id}/add`} component={Link}>\n                            <AssessmentIcon />\n                        </IconButton>\n                    </Tooltip>\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0, borderBottom: 'none' }} colSpan={6}>\n                    <Collapse in={open} timeout='auto' unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography variant='h6' gutterBottom component='div'>\n                                Группы\n                            </Typography>\n                            <Table size='small'>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>Код группы</TableCell>\n                                        <TableCell>Название группы</TableCell>\n                                        <TableCell align='right'>Следующий месяц оплаты</TableCell>\n                                        <TableCell align='right'>Сумма оплаты на следующий месяц</TableCell>\n                                        <TableCell align='right'>Тариф</TableCell>\n                                        <TableCell align='right'>Действия</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {student?.groupsPayment?.map(groupPayment => (\n                                        <>\n                                            <TableRow key={student.id}>\n                                                <TableCell component='th' scope='row'>\n                                                    {groupPayment.groupId}\n                                                </TableCell>\n                                                <TableCell>{groupPayment.groupName}</TableCell>\n                                                {groupPayment.price ? (\n                                                    <>\n                                                        <TableCell align='right' sx={{ fontWeight: 'bold' }}>\n                                                            {moment()\n                                                                .locale('ru')\n                                                                .month(groupPayment.price.calculateMonth)\n                                                                .subtract(1, 'month')\n                                                                .format('MMMM')}\n                                                        </TableCell>\n                                                        <TableCell align='right' sx={{ color: '#a61e1e', fontWeight: 'bold' }}>\n                                                            <NumberFormat\n                                                                value={groupPayment.price.priceNextMonth}\n                                                                displayType={'text'}\n                                                                thousandSeparator={true}\n                                                                suffix='₽'\n                                                            />\n                                                        </TableCell>\n                                                        <TableCell align='right' sx={{ fontWeight: 'bold' }}>\n                                                            {groupPayment.cost.name}\n                                                        </TableCell>\n                                                        <TableCell align='right'>\n                                                            <Tooltip title='Просмотреть историю расчётов'>\n                                                                <IconButton\n                                                                    to={`/dashboard/calculations/history/student/${student.id}/group/${groupPayment.groupId}`}\n                                                                    component={Link}\n                                                                >\n                                                                    <HistoryIcon />\n                                                                </IconButton>\n                                                            </Tooltip>\n                                                            <Tooltip title='Изменить тариф'>\n                                                                <IconButton\n                                                                    to={`/dashboard/students/${student.id}/cost/update/${groupPayment.groupId}/${groupPayment.costStudentGroupId}`}\n                                                                    component={Link}\n                                                                >\n                                                                    <AddCardIcon />\n                                                                </IconButton>\n                                                            </Tooltip>\n                                                        </TableCell>\n                                                    </>\n                                                ) : (\n                                                    <>\n                                                        <TableCell align='right' />\n                                                        <TableCell align='right' />\n                                                        <TableCell align='right' />\n                                                        <TableCell align='right'>\n                                                            <Tooltip title='Добавить тариф'>\n                                                                <IconButton\n                                                                    to={`/dashboard/students/${student.id}/cost/add/${groupPayment.groupId}`}\n                                                                    component={Link}\n                                                                >\n                                                                    <AddCardIcon />\n                                                                </IconButton>\n                                                            </Tooltip>\n                                                        </TableCell>\n                                                    </>\n                                                )}\n                                            </TableRow>\n                                        </>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nexport default StudentsGrid;\n","import * as React from 'react';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport DashboardPage from '../../components/Pages/DashboardPage';\nimport StudentsGrid from './Grid';\n\nconst StudentsSettings = () => {\n    return (\n        <>\n            <DashboardPage title='Управление учениками'>\n                <Typography variant='h4' sx={{ mb: 6 }}>\n                    Управление учениками\n                </Typography>\n\n                <Container maxWidth='lg' sx={{ mb: 4 }}>\n                    <Grid container spacing={3} justifyContent='center'>\n                        <StudentsGrid />\n                    </Grid>\n                </Container>\n            </DashboardPage>\n        </>\n    );\n};\n\nexport default StudentsSettings;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h10v-2H4v-6h18V6c0-1.11-.89-2-2-2zm0 4H4V6h16v2zm4 9v2h-3v3h-2v-3h-3v-2h3v-3h2v3h3z\"\n}), 'AddCard');\n\nexports.default = _default;"],"names":["StudentGroupRow","props","React","open","setOpen","student","TableRow","sx","borderBottom","TableCell","component","scope","align","id","firstName","middleName","lastName","parentName","parentMiddleName","parentLastName","value","parentPhone","displayType","format","parentEmail","Tooltip","title","IconButton","size","onClick","KeyboardArrowUp","KeyboardArrowDown","to","Link","Assessment","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","Table","TableHead","TableBody","groupsPayment","map","groupPayment","groupId","groupName","price","fontWeight","moment","locale","month","calculateMonth","subtract","color","priceNextMonth","thousandSeparator","suffix","cost","name","History","costStudentGroupId","AddCard","dispatch","useDispatch","headerRows","text","useSelector","selectStudentsState","students","isStudentsLoading","useEffect","fetchStudents","width","Paper","mb","TableContainer","minWidth","length","TableBodySkeleton","columnsCount","DashboardPage","Container","maxWidth","Grid","container","spacing","justifyContent","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}